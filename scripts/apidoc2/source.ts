import { writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import type { Node } from 'ts-morph';
import { formatTypescript } from './format';
import { pathApiDocsDir, pathProjectDir } from './paths';
import { scriptCommand } from './utils';

export type SourceableNode = Pick<Node, 'getSourceFile' | 'getStart'>;

const pathSourceBaseUrlFile = resolve(pathApiDocsDir, 'source-base-url.ts');

export function getSourcePath(node: SourceableNode): string {
  const sourceFile = node.getSourceFile();
  const filePath = sourceFile
    .getFilePath()
    .substring(pathProjectDir.length + 1);
  const startPosition = node.getStart();
  const { line, column } = sourceFile.getLineAndColumnAtPos(startPosition);

  return `${filePath}:${line}:${column}`;
}

/**
 * Writes the source base url to the correct location.
 */
export async function writeSourceBaseUrl(): Promise<void> {
  const baseUrl = getSourceBaseUrl();

  let content = `
  // This file is automatically generated.
  // Run '${scriptCommand}' to update
  export const sourceBaseUrl = '${baseUrl}';
  `.replace(/\n +/, '\n');

  content = await formatTypescript(content);

  writeFileSync(pathSourceBaseUrlFile, content);
}

function getSourceBaseUrl(): string {
  return 'TODO';
}
