import { writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import type { DocsMethod } from '../../docs/.vitepress/components/api-docs/method';
import { pathApiDocsDir } from './file';
import { formatMarkdown } from './format';
import type { ApiDocMethod, ApiDocPage } from './types';
import { scriptCommand } from './utils';

// Moved here because this must not be formatted by prettier
const vitePressInFileOptions = `---
editLink: false
---

`;

/**
 * Writes the api docs page and data for the given modules to the correct location.
 *
 * @param pages The pages to write.
 */
export async function writePages(pages: ApiDocPage[]): Promise<void> {
  await Promise.all(pages.map(writePage));
}

/**
 * Writes the api docs page and data for the given module to the correct location.
 *
 * @param page The page to write.
 */
async function writePage(page: ApiDocPage): Promise<void> {
  await writePageMarkdown(page);
  writePageJsonData(page);
}

/**
 * Writes the api docs page for the given module to the correct location.
 *
 * @param page The page to write.
 */
export async function writePageMarkdown(page: ApiDocPage): Promise<void> {
  const { title, camelTitle, deprecated, description, examples, methods } =
    page;
  // Write api docs page
  let content = `
  <script setup>
  import ApiDocsMethod from '../.vitepress/components/api-docs/method.vue';
  import ${camelTitle} from './${camelTitle}.json';
  </script>

  <!-- This file is automatically generated. -->
  <!-- Run '${scriptCommand}' to update -->

  # ${title}

  ::: v-pre

  ${
    deprecated == null
      ? ''
      : `<div class="warning custom-block">
           <p class="custom-block-title">Deprecated</p>
           <p>This module is deprecated and will be removed in a future version.</p>
           <span>${deprecated}</span>
         </div>`
  }

  ${description}

  ${examples.length === 0 ? '' : `<div class="examples">${examples.join('\n')}</div>`}

  :::

  ${methods
    .map(
      (method) => `
  ## ${method.name}

  <ApiDocsMethod :method="${camelTitle}.${method.name}" v-once />
  `
    )
    .join('')}
  `.replace(/\n +/g, '\n');

  content = vitePressInFileOptions + (await formatMarkdown(content));

  writeFileSync(resolve(pathApiDocsDir, `${camelTitle}2.md`), content);
}

/**
 * Writes the api docs data for the given module to correct location.
 *
 * @param page The page to write.
 */
function writePageJsonData(page: ApiDocPage): void {
  const { camelTitle, methods } = page;
  const pageData: Record<string, DocsMethod> = Object.fromEntries(
    methods.map((method) => [method.name, toMethodData(method)])
  );
  const content = JSON.stringify(pageData, null, 2);

  writeFileSync(resolve(pathApiDocsDir, `${camelTitle}2.json`), content);
}

function toMethodData(method: ApiDocMethod): DocsMethod {
  const { name, signatures, sourcePath } = method;
  const signature = signatures[signatures.length - 1];
  const {
    deprecated,
    description,
    since,
    parameters,
    returns,
    throws,
    examples,
    seeAlsos,
  } = signature;

  /* Target order, omitted to improve diff to old files
  return {
    name,
    deprecated,
    description,
    since,
    parameters,
    returns,
    throws: throws.length === 0 ? undefined : throws.join('\n'),
    examples: examples.join('\n'),
    seeAlsos,
    sourcePath: sourcePath.replace(/:(\d+):\d+/g, '#L$1'),
  };
  */

  return {
    name,
    description,
    parameters,
    since,
    sourcePath: sourcePath.replace(/:(\d+):\d+/g, '#L$1'),
    throws: throws.length === 0 ? undefined : throws.join('\n'),
    returns,
    examples: examples.join('\n'),
    deprecated,
    seeAlsos,
  };
}
